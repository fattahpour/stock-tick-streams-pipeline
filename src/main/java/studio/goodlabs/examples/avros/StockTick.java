/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package studio.goodlabs.examples.avros;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockTick extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8555763017922244374L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTick\",\"namespace\":\"studio.goodlabs.examples.avros\",\"fields\":[{\"name\":\"instrumentId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"currency\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mic\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"marketSector\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<StockTick> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTick> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockTick> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockTick> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockTick> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockTick to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockTick from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockTick instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockTick fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence instrumentId;
  private java.lang.Double price;
  private java.lang.CharSequence currency;
  private java.lang.CharSequence mic;
  private java.lang.CharSequence marketSector;
  private java.time.Instant timestamp;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTick() {}

  /**
   * All-args constructor.
   * @param instrumentId The new value for instrumentId
   * @param price The new value for price
   * @param currency The new value for currency
   * @param mic The new value for mic
   * @param marketSector The new value for marketSector
   * @param timestamp The new value for timestamp
   */
  public StockTick(java.lang.CharSequence instrumentId, java.lang.Double price, java.lang.CharSequence currency, java.lang.CharSequence mic, java.lang.CharSequence marketSector, java.time.Instant timestamp) {
    this.instrumentId = instrumentId;
    this.price = price;
    this.currency = currency;
    this.mic = mic;
    this.marketSector = marketSector;
    this.timestamp = timestamp;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return instrumentId;
    case 1: return price;
    case 2: return currency;
    case 3: return mic;
    case 4: return marketSector;
    case 5: return timestamp;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: instrumentId = (java.lang.CharSequence)value$; break;
    case 1: price = (java.lang.Double)value$; break;
    case 2: currency = (java.lang.CharSequence)value$; break;
    case 3: mic = (java.lang.CharSequence)value$; break;
    case 4: marketSector = (java.lang.CharSequence)value$; break;
    case 5: timestamp = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'instrumentId' field.
   * @return The value of the 'instrumentId' field.
   */
  public java.lang.CharSequence getInstrumentId() {
    return instrumentId;
  }


  /**
   * Sets the value of the 'instrumentId' field.
   * @param value the value to set.
   */
  public void setInstrumentId(java.lang.CharSequence value) {
    this.instrumentId = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'mic' field.
   * @return The value of the 'mic' field.
   */
  public java.lang.CharSequence getMic() {
    return mic;
  }


  /**
   * Sets the value of the 'mic' field.
   * @param value the value to set.
   */
  public void setMic(java.lang.CharSequence value) {
    this.mic = value;
  }

  /**
   * Gets the value of the 'marketSector' field.
   * @return The value of the 'marketSector' field.
   */
  public java.lang.CharSequence getMarketSector() {
    return marketSector;
  }


  /**
   * Sets the value of the 'marketSector' field.
   * @param value the value to set.
   */
  public void setMarketSector(java.lang.CharSequence value) {
    this.marketSector = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.time.Instant getTimestamp() {
    return timestamp;
  }


  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.time.Instant value) {
    this.timestamp = value;
  }

  /**
   * Creates a new StockTick RecordBuilder.
   * @return A new StockTick RecordBuilder
   */
  public static studio.goodlabs.examples.avros.StockTick.Builder newBuilder() {
    return new studio.goodlabs.examples.avros.StockTick.Builder();
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTick RecordBuilder
   */
  public static studio.goodlabs.examples.avros.StockTick.Builder newBuilder(studio.goodlabs.examples.avros.StockTick.Builder other) {
    if (other == null) {
      return new studio.goodlabs.examples.avros.StockTick.Builder();
    } else {
      return new studio.goodlabs.examples.avros.StockTick.Builder(other);
    }
  }

  /**
   * Creates a new StockTick RecordBuilder by copying an existing StockTick instance.
   * @param other The existing instance to copy.
   * @return A new StockTick RecordBuilder
   */
  public static studio.goodlabs.examples.avros.StockTick.Builder newBuilder(studio.goodlabs.examples.avros.StockTick other) {
    if (other == null) {
      return new studio.goodlabs.examples.avros.StockTick.Builder();
    } else {
      return new studio.goodlabs.examples.avros.StockTick.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockTick instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTick>
    implements org.apache.avro.data.RecordBuilder<StockTick> {

    private java.lang.CharSequence instrumentId;
    private java.lang.Double price;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence mic;
    private java.lang.CharSequence marketSector;
    private java.time.Instant timestamp;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(studio.goodlabs.examples.avros.StockTick.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[0].schema(), other.instrumentId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.mic)) {
        this.mic = data().deepCopy(fields()[3].schema(), other.mic);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.marketSector)) {
        this.marketSector = data().deepCopy(fields()[4].schema(), other.marketSector);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing StockTick instance
     * @param other The existing instance to copy.
     */
    private Builder(studio.goodlabs.examples.avros.StockTick other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.instrumentId)) {
        this.instrumentId = data().deepCopy(fields()[0].schema(), other.instrumentId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currency)) {
        this.currency = data().deepCopy(fields()[2].schema(), other.currency);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.mic)) {
        this.mic = data().deepCopy(fields()[3].schema(), other.mic);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.marketSector)) {
        this.marketSector = data().deepCopy(fields()[4].schema(), other.marketSector);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[5].schema(), other.timestamp);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'instrumentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getInstrumentId() {
      return instrumentId;
    }


    /**
      * Sets the value of the 'instrumentId' field.
      * @param value The value of 'instrumentId'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder setInstrumentId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.instrumentId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentId' field has been set.
      * @return True if the 'instrumentId' field has been set, false otherwise.
      */
    public boolean hasInstrumentId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'instrumentId' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder clearInstrumentId() {
      instrumentId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder setPrice(java.lang.Double value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder clearPrice() {
      price = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.currency = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'mic' field.
      * @return The value.
      */
    public java.lang.CharSequence getMic() {
      return mic;
    }


    /**
      * Sets the value of the 'mic' field.
      * @param value The value of 'mic'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder setMic(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.mic = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'mic' field has been set.
      * @return True if the 'mic' field has been set, false otherwise.
      */
    public boolean hasMic() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'mic' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder clearMic() {
      mic = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'marketSector' field.
      * @return The value.
      */
    public java.lang.CharSequence getMarketSector() {
      return marketSector;
    }


    /**
      * Sets the value of the 'marketSector' field.
      * @param value The value of 'marketSector'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder setMarketSector(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.marketSector = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'marketSector' field has been set.
      * @return True if the 'marketSector' field has been set, false otherwise.
      */
    public boolean hasMarketSector() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'marketSector' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder clearMarketSector() {
      marketSector = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.time.Instant getTimestamp() {
      return timestamp;
    }


    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder setTimestamp(java.time.Instant value) {
      validate(fields()[5], value);
      this.timestamp = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.StockTick.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTick build() {
      try {
        StockTick record = new StockTick();
        record.instrumentId = fieldSetFlags()[0] ? this.instrumentId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.lang.Double) defaultValue(fields()[1]);
        record.currency = fieldSetFlags()[2] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.mic = fieldSetFlags()[3] ? this.mic : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.marketSector = fieldSetFlags()[4] ? this.marketSector : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.timestamp = fieldSetFlags()[5] ? this.timestamp : (java.time.Instant) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTick>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTick>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTick>
    READER$ = (org.apache.avro.io.DatumReader<StockTick>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










