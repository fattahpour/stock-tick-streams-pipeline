/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package studio.goodlabs.examples.avros;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class InvalidStockFeedRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8141002623110384547L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"InvalidStockFeedRecord\",\"namespace\":\"studio.goodlabs.examples.avros\",\"fields\":[{\"name\":\"tick\",\"type\":[\"null\",{\"type\":\"record\",\"name\":\"StockTick\",\"fields\":[{\"name\":\"instrumentId\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"price\",\"type\":[\"null\",\"double\"],\"default\":null},{\"name\":\"currency\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"mic\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"marketSector\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"timestamp\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}],\"default\":null}]}],\"default\":null},{\"name\":\"errorCode\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"errorMessage\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<InvalidStockFeedRecord> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<InvalidStockFeedRecord> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<InvalidStockFeedRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<InvalidStockFeedRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<InvalidStockFeedRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this InvalidStockFeedRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a InvalidStockFeedRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a InvalidStockFeedRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static InvalidStockFeedRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private studio.goodlabs.examples.avros.StockTick tick;
  private java.lang.CharSequence errorCode;
  private java.lang.CharSequence errorMessage;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public InvalidStockFeedRecord() {}

  /**
   * All-args constructor.
   * @param tick The new value for tick
   * @param errorCode The new value for errorCode
   * @param errorMessage The new value for errorMessage
   */
  public InvalidStockFeedRecord(studio.goodlabs.examples.avros.StockTick tick, java.lang.CharSequence errorCode, java.lang.CharSequence errorMessage) {
    this.tick = tick;
    this.errorCode = errorCode;
    this.errorMessage = errorMessage;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return tick;
    case 1: return errorCode;
    case 2: return errorMessage;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: tick = (studio.goodlabs.examples.avros.StockTick)value$; break;
    case 1: errorCode = (java.lang.CharSequence)value$; break;
    case 2: errorMessage = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'tick' field.
   * @return The value of the 'tick' field.
   */
  public studio.goodlabs.examples.avros.StockTick getTick() {
    return tick;
  }


  /**
   * Sets the value of the 'tick' field.
   * @param value the value to set.
   */
  public void setTick(studio.goodlabs.examples.avros.StockTick value) {
    this.tick = value;
  }

  /**
   * Gets the value of the 'errorCode' field.
   * @return The value of the 'errorCode' field.
   */
  public java.lang.CharSequence getErrorCode() {
    return errorCode;
  }


  /**
   * Sets the value of the 'errorCode' field.
   * @param value the value to set.
   */
  public void setErrorCode(java.lang.CharSequence value) {
    this.errorCode = value;
  }

  /**
   * Gets the value of the 'errorMessage' field.
   * @return The value of the 'errorMessage' field.
   */
  public java.lang.CharSequence getErrorMessage() {
    return errorMessage;
  }


  /**
   * Sets the value of the 'errorMessage' field.
   * @param value the value to set.
   */
  public void setErrorMessage(java.lang.CharSequence value) {
    this.errorMessage = value;
  }

  /**
   * Creates a new InvalidStockFeedRecord RecordBuilder.
   * @return A new InvalidStockFeedRecord RecordBuilder
   */
  public static studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder newBuilder() {
    return new studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder();
  }

  /**
   * Creates a new InvalidStockFeedRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new InvalidStockFeedRecord RecordBuilder
   */
  public static studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder newBuilder(studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder other) {
    if (other == null) {
      return new studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder();
    } else {
      return new studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder(other);
    }
  }

  /**
   * Creates a new InvalidStockFeedRecord RecordBuilder by copying an existing InvalidStockFeedRecord instance.
   * @param other The existing instance to copy.
   * @return A new InvalidStockFeedRecord RecordBuilder
   */
  public static studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder newBuilder(studio.goodlabs.examples.avros.InvalidStockFeedRecord other) {
    if (other == null) {
      return new studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder();
    } else {
      return new studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for InvalidStockFeedRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<InvalidStockFeedRecord>
    implements org.apache.avro.data.RecordBuilder<InvalidStockFeedRecord> {

    private studio.goodlabs.examples.avros.StockTick tick;
    private studio.goodlabs.examples.avros.StockTick.Builder tickBuilder;
    private java.lang.CharSequence errorCode;
    private java.lang.CharSequence errorMessage;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.tick)) {
        this.tick = data().deepCopy(fields()[0].schema(), other.tick);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasTickBuilder()) {
        this.tickBuilder = studio.goodlabs.examples.avros.StockTick.newBuilder(other.getTickBuilder());
      }
      if (isValidValue(fields()[1], other.errorCode)) {
        this.errorCode = data().deepCopy(fields()[1].schema(), other.errorCode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[2].schema(), other.errorMessage);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing InvalidStockFeedRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(studio.goodlabs.examples.avros.InvalidStockFeedRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.tick)) {
        this.tick = data().deepCopy(fields()[0].schema(), other.tick);
        fieldSetFlags()[0] = true;
      }
      this.tickBuilder = null;
      if (isValidValue(fields()[1], other.errorCode)) {
        this.errorCode = data().deepCopy(fields()[1].schema(), other.errorCode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.errorMessage)) {
        this.errorMessage = data().deepCopy(fields()[2].schema(), other.errorMessage);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'tick' field.
      * @return The value.
      */
    public studio.goodlabs.examples.avros.StockTick getTick() {
      return tick;
    }


    /**
      * Sets the value of the 'tick' field.
      * @param value The value of 'tick'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder setTick(studio.goodlabs.examples.avros.StockTick value) {
      validate(fields()[0], value);
      this.tickBuilder = null;
      this.tick = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'tick' field has been set.
      * @return True if the 'tick' field has been set, false otherwise.
      */
    public boolean hasTick() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'tick' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public studio.goodlabs.examples.avros.StockTick.Builder getTickBuilder() {
      if (tickBuilder == null) {
        if (hasTick()) {
          setTickBuilder(studio.goodlabs.examples.avros.StockTick.newBuilder(tick));
        } else {
          setTickBuilder(studio.goodlabs.examples.avros.StockTick.newBuilder());
        }
      }
      return tickBuilder;
    }

    /**
     * Sets the Builder instance for the 'tick' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder setTickBuilder(studio.goodlabs.examples.avros.StockTick.Builder value) {
      clearTick();
      tickBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'tick' field has an active Builder instance
     * @return True if the 'tick' field has an active Builder instance
     */
    public boolean hasTickBuilder() {
      return tickBuilder != null;
    }

    /**
      * Clears the value of the 'tick' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder clearTick() {
      tick = null;
      tickBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getErrorCode() {
      return errorCode;
    }


    /**
      * Sets the value of the 'errorCode' field.
      * @param value The value of 'errorCode'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder setErrorCode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.errorCode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'errorCode' field has been set.
      * @return True if the 'errorCode' field has been set, false otherwise.
      */
    public boolean hasErrorCode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'errorCode' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder clearErrorCode() {
      errorCode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'errorMessage' field.
      * @return The value.
      */
    public java.lang.CharSequence getErrorMessage() {
      return errorMessage;
    }


    /**
      * Sets the value of the 'errorMessage' field.
      * @param value The value of 'errorMessage'.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder setErrorMessage(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.errorMessage = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'errorMessage' field has been set.
      * @return True if the 'errorMessage' field has been set, false otherwise.
      */
    public boolean hasErrorMessage() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'errorMessage' field.
      * @return This builder.
      */
    public studio.goodlabs.examples.avros.InvalidStockFeedRecord.Builder clearErrorMessage() {
      errorMessage = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public InvalidStockFeedRecord build() {
      try {
        InvalidStockFeedRecord record = new InvalidStockFeedRecord();
        if (tickBuilder != null) {
          try {
            record.tick = this.tickBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("tick"));
            throw e;
          }
        } else {
          record.tick = fieldSetFlags()[0] ? this.tick : (studio.goodlabs.examples.avros.StockTick) defaultValue(fields()[0]);
        }
        record.errorCode = fieldSetFlags()[1] ? this.errorCode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.errorMessage = fieldSetFlags()[2] ? this.errorMessage : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<InvalidStockFeedRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<InvalidStockFeedRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<InvalidStockFeedRecord>
    READER$ = (org.apache.avro.io.DatumReader<InvalidStockFeedRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










